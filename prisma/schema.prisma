datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Preparation for Betterauth integration
// TODO Add indexes where necessary

// Represents a user in the application
model User {
  id            String   @id @default(cuid())
  firstName     String?
  lastName      String?
  birthDate     DateTime?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  profile       Profile?
  requests      PracticeRequest[]

  accounts      Account[]
  sessions      Session[]
}

// Represents an OAuth account linked to a user. Think “GitHub login for user X,” “Google login for user X,” etc.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

// We need this table only if we use database-backed sessions. If we choose stateless JWT or encrypted cookie sessions in Better Auth, we can drop this model. TODO: Decide on session strategy.
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// used for email verification and password reset tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])

  districtId      String?
  district        District? @relation(fields: [districtId], references: [id])

  bio             String?
  nativeLangs     Language[] @default([])
  learningLangs   Language[] @default([]) // Can be empty if the user only wants to help others
  interests       Interest[] @default([])
  jobfield        String?
  preferenceDistrict District[]
  timezone        String   @default("Europe/Berlin")
  availability    Availability[] @default([])  

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model District {
  id        String    @id @default(cuid())
  name      String    @unique
  city      String
  country   String
}

model PracticeRequest {
  id              String   @id @default(cuid())
  requesterId     String
  requester       User     @relation(fields: [requesterId], references: [id])
  
  message        String?
  status         RequestStatus @default(OPEN)
  kind           RequestKind

  createdAt      DateTime @default(now())
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique // e.g., "en-GB", "de", "fr", "de-AT"
  name      String
}

enum RequestStatus {
  OPEN
  ACCEPTED
  CLOSED
}

enum RequestKind {
  LANGUAGE
}

enum Interest {
  TECHONOLOGY
  SPORTS
  MUSIC
  TRAVEL
  FOOD
  ART
  LITERATURE
  SCIENCE
  HISTORY
  NATURE
  DANCE
  GAMING
  MOVIES
  FITNESS
  FASHION
  PHOTOGRAPHY
  VOLUNTEERING
  THEATRE
  POLITICS
  HUMOR

}

enum Availability {
  DAYTIME
  EVENING
  WEEKENDS
}